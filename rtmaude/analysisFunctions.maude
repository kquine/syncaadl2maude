
--- Adds some standard atomic propositions to make
--- LTL model checking possibl without knowing the
--- Real-Time Maude representation of an AADL model.

(tomod LTL-MODEL-CHECK-AADL is 
  inc SEARCH-FUNCTIONS .
  pr SYNCHRONOUS-STEP .
  inc TIMED-MODEL-CHECKER .

  op value`of_in`component_is_ : BoolVarId PathName Bool -> Prop [ctor] .
  op value`of_in`component_is_ : IntVarId PathName Int -> Prop [ctor] .
  op value`of_in`component_is_ : PortId PathName Int -> Prop [ctor] .
  op value`of_in`component_is_ : PortId PathName Bool -> Prop [ctor] .
  op _@_ : PathName Location -> Prop .

  var SYSTEM : Configuration .
  var BVAR : BoolVarId .  var IVAR : IntVarId .  var B : Bool .  var I : Int .
  var PN : PathName .  var P : PortId .  var L : Location .

  eq {SYSTEM} |= value of BVAR in component PN is B 
   = (B == value of BVAR in component PN in SYSTEM) .

  eq {SYSTEM} |= value of IVAR in component PN is I 
   = (I == value of IVAR in component PN in SYSTEM) .

  eq {SYSTEM} |= PN @ L 
   = (L == location of component PN in SYSTEM) .

  eq {SYSTEM} |= value of P in component PN is I 
   = (data(I) == value of port P in component PN in SYSTEM) .

  eq {SYSTEM} |= value of P in component PN is B 
   = (data(B) == value of port P in component PN in SYSTEM) .
endtom)


(omod SIMPLE-COUNTEREXAMPLE is 
  including LTL-MODEL-CHECK-AADL .

--- simplified counter example information
  sorts CounterExampleItem CounterExampleItemSet .
  subsort CounterExampleItem < CounterExampleItemSet .
  op none : -> CounterExampleItemSet [ctor] .
  op __ : CounterExampleItemSet CounterExampleItemSet -> CounterExampleItemSet
				    [ctor comm assoc id: none format(d ni d)] .

  op _->`[_`] : ComponentId CounterExampleItemSet -> CounterExampleItem 
		[ctor format(r o d n++i d n--i)] .
  op variables : Valuation -> CounterExampleItem [ctor] .
  op features : Configuration -> CounterExampleItem [ctor] .

--- new counterexample transition
  op `{_`,_`} : CounterExampleItemSet RuleName -> Transition [ctor] .

  vars OBJECT : Object .  vars SYSTEM REST PORTS COMPS : Configuration . 
  var VAL : Valuation .  var C : ComponentId . 
  
--- simplify
  op simplify : Configuration ~> CounterExampleItemSet .
  eq simplify(< C : Component | > REST)
   = (trim(C) ->[ simplify-sub(< C : Component | >)
                  simplify-thread(< C : Component | >) ]) 
     simplify(REST) .
  eq simplify(REST) = none [owise] .

--- simplify cases
  op simplify-sub : Object ~> CounterExampleItemSet .
  eq simplify-sub(< C : Component | subcomponents : COMPS >) 
   = simplify(COMPS) .

  op simplify-thread : Object ~> CounterExampleItem .
  eq simplify-thread(< C : Thread | variables : VAL, features : PORTS >)
   = variables(VAL) 
     --- features(PORTS) 
     .
  eq simplify-thread(OBJECT) = none [owise] .

--- simplify transition
  eq {{SYSTEM},R:RuleName}
   = {simplify(SYSTEM),R:RuleName} .
endom)


