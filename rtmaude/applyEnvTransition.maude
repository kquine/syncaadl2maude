*** This one first instantiates the variables in an environmentthread according
*** to the input constraint, and then applies a transition in the environment.

(omod APPLY-ENV-TRANS is 
  including EXECUTE-THREADS .

  var O : Oid .  vars L L1 L2 : Location .  vars LS LS1 LS2 : LocationSet .
  vars PORTS NEW-PORTS COMPS REST : Configuration .
  var CR : ComponentRef .  var LDS : LocationDeclSet . var GUARD : TransGuard . 
  vars VAL OLD-VAL NEW-VALUATION : Valuation .
  var TRANSITIONS TRANSES : TransitionSet .
  var SL : StatementList .  vars PROPS : Properties .

  op applyEnvTransitions : Valuation Configuration ~> Configuration .
  --- Notice that is partial, so that advance is stopped when a transition 
  --- cannot be aplied in some thread.

  *** Distribute down to threads:
  eq applyEnvTransitions(VAL, < O : System | subcomponents : COMPS > REST) 
   = < O : System | subcomponents : applyEnvTransitions(VAL, COMPS) > 
     applyEnvTransitions(VAL, REST) .
  eq applyEnvTransitions(VAL, < O : Process | subcomponents : COMPS > REST) 
   = < O : Process | subcomponents : applyEnvTransitions(VAL, COMPS) > 
     applyEnvTransitions(VAL, REST) .
  eq applyEnvTransitions(VAL, < O : Thread | properties : PROPS > REST) 
   = if environmentThread(PROPS) then applyEnvThreadTrans(VAL,< O : Thread | >)
     else < O : Thread | > fi 
     applyEnvTransitions(VAL, REST) .
  eq applyEnvTransitions(VAL, REST) = REST [owise] .

*** Threads: non-environment thread is not executed by this one:
*** NOTE: memo of this function will store the behavior state spaces of 
***       *one* thread component, which will be generally OK.
*** NOTE: thread behaviors are still deterministic EXCEPT valuations.

  op applyEnvThreadTrans : Valuation Object ~> Object [memo] .
 ceq applyEnvThreadTrans(VAL, 
        < O : Thread | properties : IsEnvironment(true) ; PROPS, 
                       features : PORTS, 
		       currState : L1,
		       completeStates : LS, 
		       variables : OLD-VAL,
		       behaviorRef : CR >)
   = if L2 in LS then   --- done!
        < O : Thread | features :  NEW-PORTS, 
	               currState : L2,
		       variables : NEW-VALUATION >
     else        --- not a complete state: continue!
       applyEnvThreadTrans(NEW-VALUATION,
           < O : Thread | features :  NEW-PORTS, 
	                  currState : L2,
			  variables : NEW-VALUATION >)
     fi
    if ((L1 -[ GUARD ]-> L2 {SL})  ; TRANSITIONS) := transitions(CR)
    /\ evalGuard(GUARD, PORTS, VAL) 
    /\ GUARD =/= otherwise or-else 
             not someTransEnabled(TRANSITIONS, L1, VAL, PORTS)
    /\ transResult(NEW-PORTS, NEW-VALUATION) :=
              executeTransition( L1 -[ GUARD ]-> L2 {SL}, PORTS, VAL) .
endom)
