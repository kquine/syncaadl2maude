*** This module defines the "main function" that applies transitions
*** in all NON-ENVIRONMENT threads in a synchronous step.

*** It is assumed that there is one environment thread that it 
*** defined to be environment thread and that is NOT deterministic.
*** All other threads are assumed to be explicitly declared to be deterministic. 

*** It is a little same for us, but we assume in this semantics that 
*** there MUST be an enabled transition each time a thread is dispatched.
*** It is trivial to change the semantics so that a lack of enabled transition
*** just means that that component does nothing in the round.
*** Therefore, at the moment, the main function, applyTransitions,
*** is a partial function.

*** Transitions not explicitly represented.

(tomod EXECUTE-THREADS is 
  protecting EXT-BOOL .
  including EXEC-TRANS .
  including SYSTEM .
  including PROCESS .
  including THREAD .
  including AADL-PROPERTIES .
  including ENVIRONMENT-HANDLING .

  var O : Oid .  var P : PortId .  var CR : ComponentRef .
  vars PORTS NEW-PORTS COMPS REST : Configuration .
  vars PROPS : Properties .
  vars L L1 L2 : Location . vars LS : LocationSet . var LDS : LocationDeclSet .
  var GUARD : TransGuard .  vars VAL NEW-VALUATION : Valuation .
  var TRANSITIONS : TransitionSet .  var SL : StatementList .

  op applyTransitions : Configuration ~> Configuration [strat (1 0)] .
  --- Notice that is partial, so that advance is stopped when a transition 
  --- cannot be aplied in some thread.

  *** Distribute down to threads:
  eq applyTransitions(< O : System | subcomponents : COMPS > REST) 
   = < O : System | subcomponents : applyTransitions(COMPS) > 
     applyTransitions(REST) .
  eq applyTransitions(< O : Process | subcomponents : COMPS > REST) 
   = < O : Process | subcomponents : applyTransitions(COMPS) > 
     applyTransitions(REST) .
  eq applyTransitions(< O : Thread | properties : PROPS > REST)
   = if environmentThread(PROPS) then < O : Thread | >
     else applyThreadTrans(< O : Thread | >) fi 
     applyTransitions(REST) .
  eq applyTransitions(REST) = REST [owise] .

*** Threads: environment thread is not executed by this one:
*** NOTE: memo of this function will store behavior state spaces of 
***       *one* thread component, which will be generally OK.

  op applyThreadTrans : Object ~> Object [memo] .
 ceq applyThreadTrans(
        < O : Thread | properties : Deterministic(true) ; PROPS, 
                       features : PORTS, 
		       currState : L1,
		       completeStates : LS,
		       variables : VAL,
		       behaviorRef : CR >)
   = if L2 in LS then   --- done!
        < O : Thread | features :  NEW-PORTS, 
	               currState : L2,
		       variables : NEW-VALUATION >
     else        --- not a complete state: continue!
       applyThreadTrans(< O : Thread | features :  NEW-PORTS, 
                                       currState : L2,
                                       variables : NEW-VALUATION >)
     fi
   if ((L1 -[ GUARD ]-> L2 {SL})  ; TRANSITIONS) := transitions(CR)
   /\ evalGuard(GUARD, PORTS, VAL) 
   /\ GUARD =/= otherwise or-else 
             not someTransEnabled(TRANSITIONS, L1, VAL, PORTS)
   /\ transResult(NEW-PORTS, NEW-VALUATION) :=
              executeTransition( L1 -[ GUARD ]-> L2 {SL}, PORTS, VAL) .

--- true if there exists some enabled transitions
  op someTransEnabled : TransitionSet Location Valuation Configuration -> Bool .
  eq someTransEnabled((L1 -[ GUARD ]-> L2 {SL})  ; TRANSITIONS, L, VAL, PORTS) 
   = if L == L1 and evalGuard(GUARD, PORTS, VAL) then true
     else someTransEnabled(TRANSITIONS, L, VAL, PORTS) fi .
  eq someTransEnabled(emptyTransitionSet, L, VAL, PORTS) = false .
endtom)
