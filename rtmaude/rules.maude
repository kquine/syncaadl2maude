*** Here are the main rules!

(tomod SYNCHRONOUS-STEP is
  including APPLY-ENV-TRANS .
  including TRANSFER-DATA .

  var O : Oid . vars OBJ : Object .  var NZT : NzTime .
  var SYSTEM COMPS : Configuration .  var NCONF : NEConfiguration .
  var VAL : Valuation .  var VALS : ValuationSet .  var PROPS : Properties .


---
  crl [syncStepWithTime] :
      {SYSTEM}               --- top-level object
     =>
      {applyTransitions(transferData(applyEnvTransitions(VAL, SYSTEM)))}
     in time period(SYSTEM)
     if containsEnvironment(SYSTEM)
        /\ VAL ;; VALS := allEnvAssignments(SYSTEM) .


  crl [syncStepWithTimeNoEnv] :
      {SYSTEM} 
     =>
      {applyTransitions(transferData(SYSTEM))}
     in time period(SYSTEM) 
     if not containsEnvironment(SYSTEM) .
---

  --- We assume that all perids are the same, but it period may be declared
  --- in different places, either explicitly at the top level, or impicitly
  --- by the period in some thread.  
  op period : Configuration -> Time .
  eq period(< O : Component | properties : syncPeriod(NZT) ; PROPS >) = NZT .
  eq period(< O : Thread | properties : periodic-dispatch(NZT); PROPS >) = NZT .
  eq period(< O : Component | subcomponents : COMPS >) = period(COMPS) [owise] .
  eq period(OBJ NCONF) 
   = if period(OBJ) == 0 then period(NCONF) else period(OBJ) fi .
  eq period(COMPS) = 0 [owise] .   --- default value


  *** Although the above are the most correct rules, in the present fragment 
  *** we might disregard from the actual periods, since they are constants 
  *** anyways; this also saves the longer 'period(SYSTEM)' computations:

 ---(
  crl [syncStepWithTimeNoTime] :
      {SYSTEM} 
     =>
      {applyTransitions(transferData(applyEnvTransitions(VAL, SYSTEM)))}
     if containsEnvironment(SYSTEM)
        /\ VAL ;; VALS := allEnvAssignments(SYSTEM) .


  crl [syncStepWithTimeNoEnvNoTime] :
      {SYSTEM} 
     =>
      {applyTransitions(transferData(SYSTEM))}
     if not containsEnvironment(SYSTEM) .
 ---)

endtom)
